# Imports:
import cv2
import math
import numpy as np

video_capture = cv2.VideoCapture(0)
# video_capture.set(3, 160)
# video_capture.set(4, 120)

def nil(self):
    pass

cv2.namedWindow('TrackBar')
cv2.createTrackbar('HueLow', 'TrackBar', 0, 255, nil)
cv2.createTrackbar('HueHigh', 'TrackBar', 0, 255, nil)
cv2.createTrackbar('SatLow', 'TrackBar', 0, 255, nil)
cv2.createTrackbar('SatHigh', 'TrackBar', 0, 255, nil)
cv2.createTrackbar('ValLow', 'TrackBar', 0, 255, nil)
cv2.createTrackbar('ValHigh', 'TrackBar', 0, 255, nil)

# # image path
# path = "D://opencvImages//"
# fileName = "arrows.png"

# # Reading an image in default mode:
# inputImage = cv2.imread("TESTR4.JPEG")



while True:

    ret, inputImage = video_capture.read()

    # percent of original size
    scale_percent = 30
    width = int(inputImage.shape[1] * scale_percent / 100)
    height = int(inputImage.shape[0] * scale_percent / 100)
    dim = (width, height)

    inputImage = cv2.resize(inputImage, dim, interpolation=cv2.INTER_AREA)

    BlackHueL = cv2.getTrackbarPos('HueLow', 'TrackBar')
    BlackHueH = cv2.getTrackbarPos('HueHigh', 'TrackBar')
    BlackSatL = cv2.getTrackbarPos('SatLow', 'TrackBar')
    BlackSatH = cv2.getTrackbarPos('SatHigh', 'TrackBar')
    BlackValL = cv2.getTrackbarPos('ValLow', 'TrackBar')
    BlackValH = cv2.getTrackbarPos('ValHigh', 'TrackBar')

    blackLow_b = np.uint8([BlackHueL, BlackSatL, BlackValL])
    blackHigh_b = np.uint8([BlackHueH, BlackSatH, BlackValH])

    # blackLow_b = np.uint8([35, 55, 50])
    # blackHigh_b = np.uint8([0, 0, 0])

    blackMask = cv2.inRange(inputImage, blackHigh_b, blackLow_b)
    # grayscaleImage = cv2.cvtColor(blackMask, cv2.COLOR_HSV2BGR)
    #
    # # Grayscale conversion:
    # grayscaleImage = cv2.cvtColor(blackMask, cv2.COLOR_BGR2GRAY)
    # grayscaleImage = 255 - grayscaleImage

    # Find the big contours/blobs on the binary image:
    contours, hierarchy = cv2.findContours(blackMask, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)

    if len(contours) != 0:
        # find the biggest countour (c) by the area
        c = max(contours, key=cv2.contourArea)

        area = cv2.contourArea(c)
        print(area)

        # Process each contour 1-1:
        for i, c in enumerate(contours):
            # Approximate the contour to a polygon:
            contoursPoly = cv2.approxPolyDP(c, 1, True)

            img = np.zeros((350, 700, 1), dtype=np.uint8)
            cv2.fillPoly(img, [contoursPoly], (255, 255, 255))

            # Convert the polygon to a bounding rectangle:
            boundRect = cv2.boundingRect(contoursPoly)

            # [bx, by, bw, bh] = boundRect
            # cv2.rectangle(img, (bx, by), (bx + bw, by + bh), (0, 255, 0), 2)

            # Get the bounding rect's data:
            rectX = boundRect[0]
            rectY = boundRect[1]
            rectWidth = boundRect[2]
            rectHeight = boundRect[3]

            # Get the rect's area:
            rectArea = rectWidth * rectHeight

            minBlobArea = 4000

            # Check if blob is above min area:
            if rectArea > minBlobArea:
                # Crop the roi:
                # croppedImg = grayscaleImage[rectY:rectY + rectHeight, rectX:rectX + rectWidth]
                croppedImg = img[rectY:rectY + rectHeight, rectX:rectX + rectWidth]

                # Extend the borders for the skeleton:
                borderSize = 100
                croppedImg = cv2.copyMakeBorder(croppedImg, borderSize, borderSize, borderSize, borderSize,
                                                cv2.BORDER_CONSTANT)

                # Store a deep copy of the crop for results:
                grayscaleImageCopy = cv2.cvtColor(croppedImg, cv2.COLOR_GRAY2BGR)

                # Compute the skeleton:
                skeleton = cv2.ximgproc.thinning(croppedImg, None, 1)
                # Threshold the image so that white pixels get a value of 0 and
                # black pixels a value of 10:
                _, binaryImage = cv2.threshold(skeleton, 128, 10, cv2.THRESH_BINARY)

                # Set the end-points kernel:
                h = np.array([[1, 1, 1],
                              [1, 10, 1],
                              [1, 1, 1]])

                # Convolve the image with the kernel:
                imgFiltered = cv2.filter2D(binaryImage, -1, h)

                # Extract only the end-points pixels, those with
                # an intensity value of 110:
                binaryImage = np.where(imgFiltered == 110, 255, 0)
                # The above operation converted the image to 32-bit float,
                # convert back to 8-bit uint
                binaryImage = binaryImage.astype(np.uint8)

                # Find the X, Y location of all the end-points
                # pixels:
                Y, X = binaryImage.nonzero()

                # Check if I got points on my arrays:
                if len(X) > 0 or len(Y) > 0:
                    # Reshape the arrays for K-means
                    Y = Y.reshape(-1, 1)
                    X = X.reshape(-1, 1)
                    Z = np.hstack((X, Y))

                    print("y = " + str(Y))
                    print("x = " + str(X))
                    print("z = " + str(Z))


                    # K-means operates on 32-bit float data:
                    floatPoints = np.float32(Z)

                    # Set the convergence criteria and call K-means:
                    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
                    _, label, center = cv2.kmeans(floatPoints, 2, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

                    # Set the cluster count, find the points belonging
                    # to cluster 0 and cluster 1:
                    cluster1Count = np.count_nonzero(label)
                    cluster0Count = np.shape(label)[0] - cluster1Count

                    # Look for the cluster of max number of points
                    # That cluster will be the tip of the arrow:
                    maxCluster = 0
                    if cluster1Count > cluster0Count:
                        maxCluster = 1

                    # Check out the centers of each cluster:
                    matRows, matCols = center.shape
                    # We need at least 2 points for this operation:
                    if matCols >= 2:
                        # Store the ordered end-points here:
                        orderedPoints = [None] * 2
                        # Let's identify and draw the two end-points
                        # of the arrow:
                        for b in range(matRows):
                            # Get cluster center:
                            pointX = int(center[b][0])
                            pointY = int(center[b][1])
                            # Get the "tip"
                            if b == maxCluster:
                                color = (0, 0, 255)
                                orderedPoints[0] = (pointX, pointY)
                                startpointX = pointX
                                startpointY = pointY
                            # Get the "tail"
                            else:
                                color = (255, 0, 0)
                                orderedPoints[1] = (pointX, pointY)
                                endpointX = pointX
                                endpointY = pointY

                            # Draw it:
                            cv2.circle(grayscaleImageCopy, (pointX, pointY), 3, color, -1)
                            cv2.imshow("End Points", grayscaleImageCopy)
                            cv2.imshow('imgFiltered', imgFiltered)
                            cv2.imshow('binaryImage', binaryImage)
                            cv2.imshow('imageP', img)
                            cv2.imshow('imageC', croppedImg)
                            cv2.imshow('skeleton', skeleton)

    # cv2.imshow('image - gray', grayscaleImage)
    cv2.imshow('image - mask', blackMask)
    # cv2.imshow('image - skeleton', skeleton)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

